name: Integration tests

on:
  schedule:
    - cron: '0 18 * * FRI'

jobs:
  build:
    # ==================================================================================================================
    # Configuration.
    runs-on: ubuntu-latest

    steps:
      # ================================================================================================================
      - name: Retrieve the sources
        uses: actions/checkout@v1

      # ================================================================================================================
      - name: JDK 11 Setup
        uses: actions/setup-java@v1
        with:
          java-version: '11'

      # ================================================================================================================
      - name: Creates a Qase run
        id: qase
        run: |
          echo "::set-output name=qase_run_id::$( \
            curl -s "https://api.qase.io/v1/run/CTB" \
            -X POST \
            -H "Token: ${{ secrets.QASE_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"title": "${{ github.event.head_commit.message }}","description": "Test run for ${{ steps.version.outputs.version }}","environment_id": null,"cases": []}' \
            | jq -r -c ".result.id")"

      # ================================================================================================================
      - name: Build, run tests, package and deploy to Maven central - Also sends Qase tests reports
        env: # Environment variables.
          # Kucoin credentials.
          KUCOIN_NAME: ${{ secrets.KUCOIN_NAME }}
          KUCOIN_USERNAME: ${{ secrets.KUCOIN_USERNAME }}
          KUCOIN_PASSPHRASE: ${{ secrets.KUCOIN_PASSPHRASE }}
          KUCOIN_KEY: ${{ secrets.KUCOIN_KEY }}
          KUCOIN_SECRET: ${{ secrets.KUCOIN_SECRET }}
          # Gemini credentials.
          GEMINI_NAME: ${{ secrets.GEMINI_NAME }}
          GEMINI_USERNAME: ${{ secrets.GEMINI_USERNAME }}
          GEMINI_PASSPHRASE: ${{ secrets.GEMINI_PASSPHRASE }}
          GEMINI_KEY: ${{ secrets.GEMINI_KEY }}
          GEMINI_SECRET: ${{ secrets.GEMINI_SECRET }}
          # Coinbase pro credentials.
          COINBASE_PRO_NAME: ${{ secrets.COINBASE_PRO_NAME }}
          COINBASE_PRO_USERNAME: ${{ secrets.COINBASE_PRO_USERNAME }}
          COINBASE_PRO_PASSPHRASE: ${{ secrets.COINBASE_PRO_PASSPHRASE }}
          COINBASE_PRO_KEY: ${{ secrets.COINBASE_PRO_KEY }}
          COINBASE_PRO_SECRET: ${{ secrets.COINBASE_PRO_SECRET }}
          # Binance credentials.
          BINANCE_NAME: ${{ secrets.BINANCE_NAME }}
          BINANCE_USERNAME: ${{ secrets.BINANCE_USERNAME }}
          BINANCE_PASSPHRASE: ${{ secrets.BINANCE_PASSPHRASE }}
          BINANCE_KEY: ${{ secrets.BINANCE_KEY }}
          BINANCE_SECRET: ${{ secrets.BINANCE_SECRET }}
        run: |
          mvn -Pintegration package \
            -Dqase.enable=true \
            -Dqase.project.code=CTB \
            -Dqase.run.id=${{ steps.qase.outputs.qase_run_id }} \
            -Dqase.api.token=${{ secrets.QASE_TOKEN }}

      # ================================================================================================================
      - name: Test Cassandre trading bot maven archetype - basic strategy
        id: cassandre-trading-bot-spring-boot-starter-basic-archetype
        run: |
          mvn -B archetype:generate \
            -DarchetypeGroupId=tech.cassandre.trading.bot \
            -DarchetypeArtifactId=cassandre-trading-bot-spring-boot-starter-basic-archetype \
            -DarchetypeVersion=${{ steps.version.outputs.version }} \
            -DgroupId=com.example \
            -DartifactId=archetype-test-basic \
            -Dversion=1.0-SNAPSHOT \
            -Dpackage=com.example
          mvn -f archetype-test-basic/pom.xml test

      # ================================================================================================================
      - name: Test Cassandre trading bot maven archetype - basic ta4j strategy
        id: cassandre-trading-bot-spring-boot-starter-basic-ta4j-archetype
        run: |
          mvn -B archetype:generate \
            -DarchetypeGroupId=tech.cassandre.trading.bot \
            -DarchetypeArtifactId=cassandre-trading-bot-spring-boot-starter-basic-ta4j-archetype \
            -DarchetypeVersion=${{ steps.version.outputs.version }} \
            -DgroupId=com.example \
            -DartifactId=archetype-test-ta4j-basic \
            -Dversion=1.0-SNAPSHOT \
            -Dpackage=com.example
          mvn -f archetype-test-ta4j-basic/pom.xml test