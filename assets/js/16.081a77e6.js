(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{385:function(t,a,s){"use strict";s.r(a);var e=s(26),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"dry-mode-backtesting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dry-mode-backtesting"}},[t._v("#")]),t._v(" Dry mode & backtesting")]),t._v(" "),s("h2",{attrs:{id:"dry-mode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dry-mode"}},[t._v("#")]),t._v(" Dry mode")]),t._v(" "),s("p",[t._v("Cassandre provides a dry mode allowing you to simulate exchange interactions. You can enable it by setting the parameter "),s("code",[t._v("cassandre.trading.bot.exchange.modes.dry")]),t._v(" to "),s("code",[t._v("true")]),t._v(" in "),s("code",[t._v("src/main/resources/application.properties.")])]),t._v(" "),s("p",[t._v("Cassandre will emulate valid exchange replies to your orders and will increase/decrease your virtual account. This way, you can test your strategy, see the gains you will make, and validate you have the results you expect.")]),t._v(" "),s("p",[t._v("The first step is to configure your(s) virtual account(s) balances; in Dry mode, Cassandre will search and import all files starting with "),s("code",[t._v("user")]),t._v(" and ending with "),s("code",[t._v(".tsv")]),t._v(" or "),s("code",[t._v(".csv")]),t._v(" in "),s("code",[t._v("src/main/resources")]),t._v(" or "),s("code",[t._v("src/test/resources")]),t._v(".")]),t._v(" "),s("p",[t._v("In those files, for each account, you set the balances of each cryptocurrency. For example, this is the content of "),s("code",[t._v("user-trade.csv")]),t._v(" :")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("BTC,0.99962937\nUSDT,1000\nETH,10 \n")])])]),s("p",[t._v("When you start Cassandre, you will see this:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("22:53:38 - Adding account 'trade'\n22:53:38 - - Adding balance 0.99962937 BTC\n22:53:38 - - Adding balance 1000 USDT\n22:53:38 - - Adding balance 10 ETH\n")])])]),s("p",[t._v("Now you can create orders and positions, and this will increase/decrease your virtual account. Of course, Cassandre checks that you have enough assets before accepting your orders.")]),t._v(" "),s("p",[t._v("You can use the dry mode to test your trading bot with real data, but you can also use it for backtesting.")]),t._v(" "),s("h2",{attrs:{id:"backtesting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#backtesting"}},[t._v("#")]),t._v(" Backtesting")]),t._v(" "),s("p",[t._v("In simple words, backtesting a strategy is the process of testing a trading strategy on prior time periods. Cassandre trading bot allows you to simulate your bots' reaction to historical data during tests.")]),t._v(" "),s("p",[t._v("The first step is to add "),s("a",{attrs:{href:"https://mvnrepository.com/artifact/tech.cassandre.trading.bot/cassandre-trading-bot-spring-boot-starter-test",target:"_blank",rel:"noopener noreferrer"}},[t._v("cassandre-trading-bot-spring-boot-starter-test"),s("OutboundLink")],1),t._v(" to your project dependency.")]),t._v(" "),s("p",[t._v("Edit your "),s("code",[t._v("pom.xml")]),t._v(" file and add this dependency :")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[t._v("\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependencies")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t\t...\n\t\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("tech.cassandre.trading.bot"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("cassandre-trading-bot-spring-boot-starter-test"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("4.2.1"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("scope")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("test"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("scope")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t\t...\n\t"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependencies")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[s("a",{attrs:{href:"https://search.maven.org/search?q=g:%22tech.cassandre.trading.bot%22%20AND%20a:%22cassandre-trading-bot-spring-boot-starter%22",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://img.shields.io/maven-central/v/tech.cassandre.trading.bot/cassandre-trading-bot-spring-boot-starter.svg?label=Maven%20Central",alt:"Maven Central"}}),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("Now, we need to generate the data we want to use during the JUnit tests. We can use the "),s("a",{attrs:{href:"https://docs.kucoin.com/#get-klines",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kucoin API"),s("OutboundLink")],1),t._v("; to do so, run this on the command line :")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("startDate")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("date")]),t._v(" --date"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3 months ago"')]),t._v(" +"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s"')]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("endDate")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("date")]),t._v(" +"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%s"')]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -s "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://api.kucoin.com/api/v1/market/candles?type=1day&symbol=BTC-USDT&startAt='),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${startDate}")]),t._v("&endAt="),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${endDate}")]),t._v('"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq -r -c "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('".data[] | @tsv"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tac")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" tickers-btc-usdt.tsv\n")])])]),s("p",[t._v("It will create a file named "),s("code",[t._v("tickers-btc-usdt.tsv")]),t._v(" that contains the historical rate of BTC-USDT from "),s("code",[t._v("startDate")]),t._v(" (3 months ago) to "),s("code",[t._v("endDate")]),t._v(" (now). Of course, you can choose your own dates and currency pair.")]),t._v(" "),s("p",[t._v("Place this file in the "),s("code",[t._v("src/test/resources")]),t._v(" folder of your project and add this line to your JUnit test class:")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Import")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TickerFluxMock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("Now, during the tests, instead of receiving tickers from the exchange, you will receive tickers imported from the "),s("code",[t._v("tsv/csv")]),t._v(" files you put in "),s("code",[t._v("src/test/resources")]),t._v(".")]),t._v(" "),s("p",[t._v("You can see an example of dry mode and backtesting in the "),s("RouterLink",{attrs:{to:"/learn/src/learn/technical-analysis-backup/overview.html"}},[t._v("Technical analysis chapter")]),t._v(".")],1)])}),[],!1,null,null,null);a.default=n.exports}}]);