"use strict";(self.webpackChunkcassandre_trading_bot_website=self.webpackChunkcassandre_trading_bot_website||[]).push([[198],{3478:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-33b59512",path:"/deploy-and-run/docker.html",title:"Deploy and run Cassandre with Docker",lang:"en-US",frontmatter:{lang:"en-US",title:"Deploy and run Cassandre with Docker",description:"Learn how to use Docker to deploy PostgreSQL and Cassandre easily"},excerpt:"",headers:[{level:2,title:"Server installation",slug:"server-installation",children:[{level:3,title:"Install useful & required tools",slug:"install-useful-required-tools",children:[]},{level:3,title:"Install Docker & docker-compose",slug:"install-docker-docker-compose",children:[]},{level:3,title:"Add a user for the trading bot",slug:"add-a-user-for-the-trading-bot",children:[]}]},{level:2,title:"Docker images on the server",slug:"docker-images-on-the-server",children:[{level:3,title:"Network",slug:"network",children:[]},{level:3,title:"Volumes",slug:"volumes",children:[]},{level:3,title:"Postgresql",slug:"postgresql",children:[]},{level:3,title:"Postgresql backup",slug:"postgresql-backup",children:[]}]},{level:2,title:"Your bot",slug:"your-bot",children:[{level:3,title:"Build the docker image",slug:"build-the-docker-image",children:[]},{level:3,title:"Push image to our private docker hub",slug:"push-image-to-our-private-docker-hub",children:[]},{level:3,title:"Deploy to the production server",slug:"deploy-to-the-production-server",children:[]}]}],filePathRelative:"deploy-and-run/docker.md"}},120:(s,n,a)=>{a.r(n),a.d(n,{default:()=>M});var e=a(6252);const t=(0,e._)("h1",{id:"deploy-run-with-docker",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#deploy-run-with-docker","aria-hidden":"true"},"#"),(0,e.Uk)(" Deploy & run with Docker")],-1),r=(0,e._)("h2",{id:"server-installation",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#server-installation","aria-hidden":"true"},"#"),(0,e.Uk)(" Server installation")],-1),l=(0,e.Uk)("We are starting with a fresh "),o={href:"https://releases.ubuntu.com/20.04/",target:"_blank",rel:"noopener noreferrer"},p=(0,e.Uk)("Ubuntu 20.04.2 LTS (Focal Fossa)"),c=(0,e.Uk)(" installation on a dedicated server, and we will use "),i={href:"https://www.docker.com/",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Uk)("Docker"),d=(0,e.Uk)(" to run our trading bot and the other components."),b=(0,e._)("p",null,"This is how it works:",-1),k=(0,e.Uk)("Two images are started manually on the server: "),m=(0,e.Uk)("A "),h={href:"https://hub.docker.com/_/postgres",target:"_blank",rel:"noopener noreferrer"},_=(0,e.Uk)("Postgresql image"),g=(0,e.Uk)(" to store strategies, orders, trades & positions."),A=(0,e.Uk)("A "),S={href:"https://hub.docker.com/r/prodrigestivill/postgres-backup-local",target:"_blank",rel:"noopener noreferrer"},E=(0,e.Uk)("Postgresql backup image"),v=(0,e.Uk)(" to backup Postgresql databases."),R=(0,e._)("li",null,"Our trading bot is built as a Docker image and deployed to the server by our continuous integration server.",-1),y=(0,e.uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>We chose PostgreSQL as our database, but you can choose the one you want, just add the corresponding JDBC driver to your <code>pom.xml</code>.</p></div><h3 id="install-useful-required-tools" tabindex="-1"><a class="header-anchor" href="#install-useful-required-tools" aria-hidden="true">#</a> Install useful &amp; required tools</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> update\n<span class="token function">sudo</span> <span class="token function">apt</span> -y <span class="token function">install</span> apt-transport-https ca-certificates <span class="token function">curl</span> gnupg2 pass software-properties-common\n<span class="token function">sudo</span> <span class="token function">apt</span> -y upgrade\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="install-docker-docker-compose" tabindex="-1"><a class="header-anchor" href="#install-docker-docker-compose" aria-hidden="true">#</a> Install Docker &amp; docker-compose</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">curl</span> -fsSL https://download.docker.com/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -\n<span class="token function">sudo</span> add-apt-repository <span class="token string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> stable&quot;</span>\n<span class="token function">sudo</span> <span class="token function">apt</span> update\n<span class="token function">sudo</span> <span class="token function">apt-cache</span> policy docker-ce\n<span class="token function">sudo</span> <span class="token function">apt</span> -y <span class="token function">install</span> docker-ce docker-compose\n<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">666</span> /var/run/docker.sock\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="add-a-user-for-the-trading-bot" tabindex="-1"><a class="header-anchor" href="#add-a-user-for-the-trading-bot" aria-hidden="true">#</a> Add a user for the trading bot</h3><p>Our bot will be deployed to this server from another server (in our case, our continuous integration server), so we need to create a user that can connect with SSH:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">useradd</span> -m -d /home/sma-trading-bot sma-trading-bot\n<span class="token function">sudo</span> <span class="token function">passwd</span> sma-trading-bot\n<span class="token function">sudo</span> gpasswd -a sma-trading-bot docker\n<span class="token function">sudo</span> <span class="token function">usermod</span> --shell /bin/bash sma-trading-bot\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="docker-images-on-the-server" tabindex="-1"><a class="header-anchor" href="#docker-images-on-the-server" aria-hidden="true">#</a> Docker images on the server</h2><p>Download the <a href="/assets/src/docker-compose.yml">docker-compose.yml</a> file on your server, edit your preferences (password, timezone, backup settings...) and run it with the command:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> docker-compose up -d\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>You can download it directly with the command : <code>curl -o docker-compose.yml https://trading-bot.cassandre.tech/assets/src/docker-compose.yml</code></p></div><h3 id="network" tabindex="-1"><a class="header-anchor" href="#network" aria-hidden="true">#</a> Network</h3><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">networks</span><span class="token punctuation">:</span>\n  <span class="token key atrule">cassandre</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> cassandre\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>This part declares a network named <code>cassandre</code>.</p><h3 id="volumes" tabindex="-1"><a class="header-anchor" href="#volumes" aria-hidden="true">#</a> Volumes</h3><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n  <span class="token key atrule">cassandre_database</span><span class="token punctuation">:</span>\n  <span class="token key atrule">cassandre_database_backup</span><span class="token punctuation">:</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>This part declares two volumes (space on disk) :</p><ul><li><code>cassandre_database</code> for the database.</li><li><code>cassandre_database_backup</code> for the database backups.</li></ul><h3 id="postgresql" tabindex="-1"><a class="header-anchor" href="#postgresql" aria-hidden="true">#</a> Postgresql</h3><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>  <span class="token key atrule">cassandre-postgresql</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> library/postgres<span class="token punctuation">:</span>13<span class="token punctuation">-</span>alpine\n    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always\n    <span class="token key atrule">networks</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> cassandre\n    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> cassandre_database<span class="token punctuation">:</span>/var/lib/postgresql/data\n    <span class="token key atrule">environment</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> TZ=Europe/Paris\n      <span class="token punctuation">-</span> PGTZ=Europe/Paris\n      <span class="token punctuation">-</span> POSTGRES_DB=cassandre_trading_bot\n      <span class="token punctuation">-</span> POSTGRES_USER=cassandre_trading_bot\n      <span class="token punctuation">-</span> POSTGRES_PASSWORD=mypassword\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>This starts a Postgresql image where our trading bot will store its data (strategies, orders, trades &amp; positions).</p><h3 id="postgresql-backup" tabindex="-1"><a class="header-anchor" href="#postgresql-backup" aria-hidden="true">#</a> Postgresql backup</h3><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>  <span class="token key atrule">cassandre-postgresql-backup</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> prodrigestivill/postgres<span class="token punctuation">-</span>backup<span class="token punctuation">-</span>local<span class="token punctuation">:</span>13<span class="token punctuation">-</span>alpine\n    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> cassandre<span class="token punctuation">-</span>postgresql\n    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always\n    <span class="token key atrule">networks</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> cassandre\n    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> cassandre_database_backup<span class="token punctuation">:</span>/backups\n    <span class="token key atrule">environment</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> TZ=Europe/Paris\n      <span class="token punctuation">-</span> POSTGRES_HOST=postgresql\n      <span class="token punctuation">-</span> POSTGRES_DB=cassandre_trading_bot\n      <span class="token punctuation">-</span> POSTGRES_USER=cassandre_trading_bot\n      <span class="token punctuation">-</span> POSTGRES_PASSWORD=mypassword\n      <span class="token punctuation">-</span> POSTGRES_EXTRA_OPTS=<span class="token punctuation">-</span><span class="token punctuation">-</span>schema=public\n      <span class="token punctuation">-</span> SCHEDULE=@hourly\n      <span class="token punctuation">-</span> BACKUP_KEEP_DAYS=7\n      <span class="token punctuation">-</span> BACKUP_KEEP_WEEKS=4\n      <span class="token punctuation">-</span> BACKUP_KEEP_MONTHS=0\n      <span class="token punctuation">-</span> HEALTHCHECK_PORT=8080\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>This starts an image that will connect to the Postgresql image and make backups according to the parameters: <code>SCHEDULE</code>, <code>BACKUP_KEEP_DAYS</code>, <code>BACKUP_KEEP_WEEKS</code> and <code>BACKUP_KEEP_MONTHS</code>.</p><h2 id="your-bot" tabindex="-1"><a class="header-anchor" href="#your-bot" aria-hidden="true">#</a> Your bot</h2><p>There are several ways to do what we are trying to do, we choose this one:</p>',27),f=(0,e.Uk)("Our trading bot source code is hosted in a private "),D={href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"},T=(0,e.Uk)("Github"),N=(0,e.Uk)(" project."),C=(0,e.Uk)("On every push, our "),O={href:"https://github.com/features/actions",target:"_blank",rel:"noopener noreferrer"},w=(0,e.Uk)("Github actions"),P=(0,e.Uk)(" script does the following steps: "),U=(0,e._)("li",null,"Creates the docker image of our trading bot.",-1),G=(0,e.Uk)("Login to our "),B={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},I=(0,e.Uk)("docker hub repository"),q=(0,e.Uk)("."),H=(0,e._)("li",null,"Push the image to our docker hub repository.",-1),x=(0,e._)("li",null,"Connect to our private server via ssh.",-1),$=(0,e._)("li",null,"Stop the previous running image of our bot and download/run the new image.",-1),K=(0,e.uE)('<p>The source of our script is <a href="/assets/src/deployment.yml">here</a> and this is what it does:</p><h3 id="build-the-docker-image" tabindex="-1"><a class="header-anchor" href="#build-the-docker-image" aria-hidden="true">#</a> Build the docker image</h3><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Build with Maven and creates the docker image\n  <span class="token key atrule">run</span><span class="token punctuation">:</span> mvn spring<span class="token punctuation">-</span>boot<span class="token punctuation">:</span>build<span class="token punctuation">-</span>image\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="push-image-to-our-private-docker-hub" tabindex="-1"><a class="header-anchor" href="#push-image-to-our-private-docker-hub" aria-hidden="true">#</a> Push image to our private docker hub</h3><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Push image to docker hub\n  <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n    echo ${{ secrets.DOCKER_HUB_PASSWORD }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin\n    docker push straumat/trading-bot:latest</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="deploy-to-the-production-server" tabindex="-1"><a class="header-anchor" href="#deploy-to-the-production-server" aria-hidden="true">#</a> Deploy to the production server</h3><p>The CI script does the following:</p><ul><li>Connect to our production server with SSH.</li><li>Login to our docker private account.</li><li>Stop &amp; delete the image of the previous trading bot (if it exists).</li><li>Retrieve the new image from the docker hub.</li><li>Run the image with all the parameters specified in Github secrets.</li></ul><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy to production server\n  <span class="token key atrule">uses</span><span class="token punctuation">:</span> appleboy/ssh<span class="token punctuation">-</span>action@master\n  <span class="token key atrule">with</span><span class="token punctuation">:</span>\n    <span class="token key atrule">host</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.SSH_HOST <span class="token punctuation">}</span><span class="token punctuation">}</span>\n    <span class="token key atrule">port</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.SSH_PORT <span class="token punctuation">}</span><span class="token punctuation">}</span>\n    <span class="token key atrule">username</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.SSH_USERNAME <span class="token punctuation">}</span><span class="token punctuation">}</span>\n    <span class="token key atrule">password</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.SSH_PASSWORD <span class="token punctuation">}</span><span class="token punctuation">}</span>\n    <span class="token key atrule">script</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n      echo ${{ secrets.DOCKER_HUB_PASSWORD }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin\n      docker stop $(docker ps -aq --filter &quot;label=trading-bot&quot;)\n      docker rm -f $(docker ps -aq --filter &quot;label=trading-bot&quot;)\n      docker pull straumat/trading-bot:latest\n      docker run  -d \\\n                  --security-opt apparmor=unconfined \\\n                  --network=&quot;cassandre&quot; \\\n                  -e TZ=Europe/Paris \\\n                  -e CASSANDRE_TRADING_BOT_EXCHANGE_DRIVER_CLASS_NAME=&#39;${{ secrets.CASSANDRE_TRADING_BOT_EXCHANGE_DRIVER_CLASS_NAME }}&#39; \\\n                  -e CASSANDRE_TRADING_BOT_EXCHANGE_USERNAME=&#39;${{ secrets.CASSANDRE_TRADING_BOT_EXCHANGE_USERNAME }}&#39; \\\n                  -e CASSANDRE_TRADING_BOT_EXCHANGE_PASSPHRASE=&#39;${{ secrets.CASSANDRE_TRADING_BOT_EXCHANGE_PASSPHRASE }}&#39; \\\n                  -e CASSANDRE_TRADING_BOT_EXCHANGE_KEY=&#39;${{ secrets.CASSANDRE_TRADING_BOT_EXCHANGE_KEY }}&#39; \\\n                  -e CASSANDRE_TRADING_BOT_EXCHANGE_SECRET=&#39;${{ secrets.CASSANDRE_TRADING_BOT_EXCHANGE_SECRET }}&#39; \\\n                  -e CASSANDRE_TRADING_BOT_EXCHANGE_MODES_SANDBOX=&#39;${{ secrets.CASSANDRE_TRADING_BOT_EXCHANGE_MODES_SANDBOX }}&#39; \\\n                  -e CASSANDRE_TRADING_BOT_EXCHANGE_MODES_DRY=&#39;${{ secrets.CASSANDRE_TRADING_BOT_EXCHANGE_MODES_DRY }}&#39; \\\n                  -e CASSANDRE_TRADING_BOT_EXCHANGE_RATES_ACCOUNT=&#39;${{ secrets.CASSANDRE_TRADING_BOT_EXCHANGE_RATES_ACCOUNT }}&#39; \\\n                  -e CASSANDRE_TRADING_BOT_EXCHANGE_RATES_TICKER=&#39;${{ secrets.CASSANDRE_TRADING_BOT_EXCHANGE_RATES_TICKER }}&#39; \\\n                  -e CASSANDRE_TRADING_BOT_EXCHANGE_RATES_ORDER=&#39;${{ secrets.CASSANDRE_TRADING_BOT_EXCHANGE_RATES_ORDER }}&#39; \\\n                  -e SPRING_DATASOURCE_DRIVER_CLASS_NAME=${{ secrets.CASSANDRE_TRADING_BOT_DATABASE_DATASOURCE_DRIVER_CLASS_NAME }} \\\n                  -e SPRING_DATASOURCE_URL=${{ secrets.CASSANDRE_TRADING_BOT_DATABASE_DATASOURCE_URL }} \\\n                  -e SPRING_DATASOURCE_USERNAME=${{ secrets.CASSANDRE_TRADING_BOT_DATABASE_DATASOURCE_USERNAME }} \\\n                  -e SPRING_DATASOURCE_PASSWORD=${{ secrets.CASSANDRE_TRADING_BOT_DATABASE_DATASOURCE_PASSWORD }} \\\n                  -l trading-bot \\\n                  straumat/trading-bot:latest</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>These are the parameters for the Postgresql connection:</p><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Value</th></tr></thead><tbody><tr><td style="text-align:left;">DRIVER-CLASS-NAME</td><td style="text-align:left;">org.postgresql.Driver</td></tr><tr><td style="text-align:left;">URL</td><td style="text-align:left;">jdbc:postgresql://cassandre-postgresql/cassandre_trading_bot</td></tr><tr><td style="text-align:left;">USERNAME</td><td style="text-align:left;">cassandre_trading_bot</td></tr><tr><td style="text-align:left;">PASSWORD</td><td style="text-align:left;">mypassword</td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>On the server, thanks to the docker label, you can view the bot logs with the command : <code>docker logs $(docker ps -aq --filter &quot;label=trading-bot&quot;) --follow</code></p></div>',12),X={},M=(0,a(3744).Z)(X,[["render",function(s,n){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,r,(0,e._)("p",null,[l,(0,e._)("a",o,[p,(0,e.Wm)(a)]),c,(0,e._)("a",i,[u,(0,e.Wm)(a)]),d]),b,(0,e._)("ul",null,[(0,e._)("li",null,[k,(0,e._)("ul",null,[(0,e._)("li",null,[m,(0,e._)("a",h,[_,(0,e.Wm)(a)]),g]),(0,e._)("li",null,[A,(0,e._)("a",S,[E,(0,e.Wm)(a)]),v])])]),R]),y,(0,e._)("ul",null,[(0,e._)("li",null,[f,(0,e._)("a",D,[T,(0,e.Wm)(a)]),N]),(0,e._)("li",null,[C,(0,e._)("a",O,[w,(0,e.Wm)(a)]),P,(0,e._)("ul",null,[U,(0,e._)("li",null,[G,(0,e._)("a",B,[I,(0,e.Wm)(a)]),q]),H,x,$])])]),K],64)}]])},3744:(s,n)=>{n.Z=(s,n)=>{const a=s.__vccOpts||s;for(const[s,e]of n)a[s]=e;return a}}}]);