"use strict";(self.webpackChunkcassandre_trading_bot_website=self.webpackChunkcassandre_trading_bot_website||[]).push([[893],{6511:(e,a,r)=>{r.r(a),r.d(a,{data:()=>t});const t={key:"v-26a3ca02",path:"/learn/graphql-api-documentation/scalars.html",title:"Scalars",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:3,title:"About scalars",slug:"about-scalars",children:[]},{level:3,title:"BigDecimal",slug:"bigdecimal",children:[]},{level:3,title:"Boolean",slug:"boolean",children:[]},{level:3,title:"DateTime",slug:"datetime",children:[]},{level:3,title:"Float",slug:"float",children:[]},{level:3,title:"ID",slug:"id",children:[]},{level:3,title:"Int",slug:"int",children:[]},{level:3,title:"String",slug:"string",children:[]}],filePathRelative:"learn/graphql-api-documentation/scalars.md"}},667:(e,a,r)=>{r.r(a),r.d(a,{default:()=>y});var t=r(6252);const n=(0,t._)("h1",{id:"scalars",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#scalars","aria-hidden":"true"},"#"),(0,t.Uk)(" Scalars")],-1),l=(0,t._)("h3",{id:"about-scalars",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#about-scalars","aria-hidden":"true"},"#"),(0,t.Uk)(" About scalars")],-1),i={href:"https://graphql.github.io/graphql-spec/June2018/#sec-Scalars",target:"_blank",rel:"noopener noreferrer"},s=(0,t.Uk)("Scalars"),d=(0,t.Uk)(" are primitive values: "),c=(0,t._)("code",null,"Int",-1),o=(0,t.Uk)(", "),h=(0,t._)("code",null,"Float",-1),u=(0,t.Uk)(", "),p=(0,t._)("code",null,"String",-1),b=(0,t.Uk)(", "),g=(0,t._)("code",null,"Boolean",-1),f=(0,t.Uk)(", or "),m=(0,t._)("code",null,"ID",-1),_=(0,t.Uk)("."),k=(0,t.uE)('<p>When calling the GraphQL API, you must specify nested subfields until you return only scalars.</p><h3 id="bigdecimal" tabindex="-1"><a class="header-anchor" href="#bigdecimal" aria-hidden="true">#</a> BigDecimal</h3><hr><h3 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean" aria-hidden="true">#</a> Boolean</h3><p>The <code>Boolean</code> scalar type represents <code>true</code> or <code>false</code>.</p><hr><h3 id="datetime" tabindex="-1"><a class="header-anchor" href="#datetime" aria-hidden="true">#</a> DateTime</h3><hr><h3 id="float" tabindex="-1"><a class="header-anchor" href="#float" aria-hidden="true">#</a> Float</h3><p>The <code>Float</code> scalar type represents signed double-precision fractional values as specified by <a href="http://en.wikipedia.org/wiki/IEEE_floating_point">IEEE 754</a>.</p><hr><h3 id="id" tabindex="-1"><a class="header-anchor" href="#id" aria-hidden="true">#</a> ID</h3><p>The <code>ID</code> scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as <code>&quot;4&quot;</code>) or integer (such as <code>4</code>) input value will be accepted as an ID.</p><hr><h3 id="int" tabindex="-1"><a class="header-anchor" href="#int" aria-hidden="true">#</a> Int</h3><p>The <code>Int</code> scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.</p><hr><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h3><p>The <code>String</code> scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.</p><hr>',20),v={},y=(0,r(3744).Z)(v,[["render",function(e,a){const r=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[n,l,(0,t._)("p",null,[(0,t._)("a",i,[s,(0,t.Wm)(r)]),d,c,o,h,u,p,b,g,f,m,_]),k],64)}]])},3744:(e,a)=>{a.Z=(e,a)=>{const r=e.__vccOpts||e;for(const[e,t]of a)r[e]=t;return r}}}]);